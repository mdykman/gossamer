<doc><copyright>dexter (c) 2007, 2008 Michael Dykman 
Free for use under version 2.0 of the Artistic License.     
http://www.opensource.org/licences/artistic-license.php</copyright>
  <title>
    <![CDATA[Dexter User Guide.]]>
  </title>
  <author>
    <![CDATA[Michael Dykman - mdykman@gmail.com]]>
  </author>
  <references>
    <reference>
      <title>Dexter</title>
      <summary>An introduction to dexter and it's design philosophy.</summary>
      <url>index.xml</url>
    </reference>
    <reference>
      <title>Dexter User Guide</title>
      <summary>Reference material 
      needed to use dexter and dexterity to produce XSL stylesheets</summary>
      <url>dexter-user-guide.xml</url>
    </reference>
    <reference>
      <title>Dexter API</title>
      <summary>Reference material For the developer who wishes to implement their own
      descriptors, editors and path functions</summary>
      <url>dexter-api.xml</url>
    </reference>
    <reference>
      <title>Javadoc</title>
      <summary>Javadoc of the dexter code base, including modules</summary>
      <url>javadoc/index.html</url>
    </reference>
  </references>
  <overview>
    <para>
      <![CDATA[
      In this document, you will find the reference material needed to use dexter and dexterity
      to produce XSL stylesheets.
			]]>
    </para>
  </overview>
  <section>
    <title>The Dexter Environment</title>
    <overview>
      <para>Here we describe the basic environment and the mechanisms which all modules share</para>
    </overview>

    <chapter>
      <title>Running Dexter</title>
		<para>
		Dexter requires a minimum Java JRE 1.6. If you don't have an appropriate 
		version already installed, one can be downloaded for most platforms at 
		http://java.sun.com.
		</para>
		<para>
		Dexter can be run as a command line application or it can be embedded
		in an application, such as an IDE. No launch script is provided in 
		this version. The command line syntax for dexter
		is the same on all platforms:
		</para>
		<code>
		<![CDATA[
		$ java -jar <path-to-dexter-jar> source1.ext [source2.ext ...]
		]]>
		</code>
		<para>
		This will generate an XSL file with the name formed from the 
		name of the input file with the 'xsl' extension added.
		</para>
		<code><![CDATA[
		index.html        -> index.html.xsl
		monthly-chart.svg -> monthly-chart.svg.xsl
		]]>
		</code>
		<para>
		Additional XSL files may be produced as the result of certain
		descriptor productions.  See <link url="#Dexterity Descriptors-sub">sub</link>
		for an example.
		</para>
		<para>
		If the input document contains no dexter-defined attributes, the resulting
		stylesheet, when applied to any XML data set, will output the input 
		document verbatim.
		</para>
		<para>
		If you're interested in embedding dexter, refer to the
		<link url="dexter-api.xml">dexter api</link> for information.
		</para>
	 </chapter>
    <chapter>
      <title>Terminology</title>
      <para>
        <![CDATA[
			The document representing the desired target layout is termed the 'design document'.
			The design document is also sometimes referred to as the 'input document'.
			]]>
      </para>

      <para>
        <![CDATA[
       When a design document is embellished with dexter-defined attributes, the document is 
      termed the 'source document'.
 			]]>
      </para>
      <para>
        <![CDATA[
			The document which contains data to be formatted by an XSL stylesheet is termed
			the 'data document'
			]]>
      </para>
      <para>
        <![CDATA[
			The document which is created by applying an XSL stylesheet to a data document
			is termed the 'result document'. It should be emphasized that both the
			result document and the design document represent the same XML type.
			]]>
      </para>
    </chapter>
    <chapter>
      <title>Basics</title>
      <para>
        <![CDATA[
			The default prefix, specified in dexter.properties, is 'xpl'.  This may be changed
			if either it happens to conflict with your XML namespace or because you happen to
			feel like it.
			]]>
      </para>
      <para>
        <![CDATA[
			In this document, when describing dexter attributes, the convention will be to refer
			to them by the base name in the documentation and with the default prefix attached
			in code examples. ie. the attribute referred to as 'each' throughout the 
			documentation is referred to as 'xpleach' in code examples. 
			]]>
      </para>
      <para>
        <![CDATA[
			All dexter-defined attributes are logically removed from the source document
			are they are processed.  No reference to them will be found in the XSL stylesheet
			nor in any result document.  They are not physically removed from the input file.
			]]>
      </para>
      <para>
        <![CDATA[
				Note that the scope of any descriptor is identical to the scope of the element which
				contains it.
				]]>
      </para>
    </chapter>
    <chapter>
      <title>Id Attributes</title>
      <para>
        <![CDATA[
			The source document may include a doctype definition which dexter will reflect but otherwise
			ignore, making no attempt at validation. As any given document's DTD or schema defines 
			the id attributes for that XML document type, dexter uses an alternate mechanism.
				]]>
      </para>
      <para>
        <![CDATA[
			Dexter expects the value of the property 'dexter.node.id', defined in
			dexter.properties, to be a comma-delimited list of id-attribute names.
			By default, that list is defined as 'id,ID'. 
			Some operations in dexter may require an element to have an id-attribute as a 
			prerequisite.
			]]>
      </para>
      <para>
        <![CDATA[
			As the values of id-attributes should remain unique throughout 
			any given document, dexter provides special handling. When
			an id attribute appears within an iterative context, the value 
			is rendered with a suffix appropriate to the depth and position.
			If the reference occurs outside of any iterative context, the 
			attribute's value remains unchanged.
				]]>
      </para>
      <para>
        <![CDATA[
			Note that if the id-attributes are not unique in the source document, some of dexter's 
			productions will have undefined results.
				]]>
      </para>
    </chapter>
    <chapter>
      <title>Design Document</title>
      <para>
        <![CDATA[
			Dexter accepts any well-formed XML as input. The specific XML type
			which is used as input entirely depends on the type of document
			you expect the resulting stylesheet to produce.
			If the goal is to generate XSL transforms which will create XHTML, then the design document
			must be an XHTML document.  If the goal is to generate XSLT which will generate
			SVG, then the design document must be an SVG document. For day-to-day web projects, 
			HTML is typically provided by a web designer and may require some tweaking
			to ensure that it is fully-compliant XHTML.  
			]]>
      </para>
      <para>In the same manner that id attributes are defined for a given DocType are typically
      specified in the DTD/Schema for that type, so are the entity references defined, such as
      <![CDATA[&quot;]]> in XHTML.  As dexter avoids DTD/schema validation (we do hideous things
      to the document during processing that a validating document would refuse), entity references
      are handled in a fairly low-tech way: they are simply passed through as literal data tokens
      
      </para>
      <para>
      Dexter uses a simple entity resolver when parsing input documents at the command line. Specifically,
      it allows character entity references to pass through as literal text tokens in the output document.  This
      preserves the references in the result document without resolving them.  Doctype references return the 
      empty string back to the parser, to avoid validation, but preserves the attributes in the result
      document through attributes in the xsl:output element     
      </para>
	 <para>
        <![CDATA[
			I have no intention of interfacing to the
			myriad options provided by 'tidy'.  Instead, it is expected that a reasonably sophisticated
			developer can deal with task of ensuring that input documents are compliant XML,
			whether through an automated clean-up tool like 'tidy', or manually, as they prefer.  
			]]>
      </para>
		</chapter>
		<chapter>
		<title>Examples</title>
      <para>
        <![CDATA[
        The documentation for dexter resides in XML documents.  It is formatted 
        for human readability through stylesheets.  If you are viewing this in XHTML
        in a standard web browser, this is likely stylesheet 'docster.html.xsl' which was 
        generated from the dexter source file ]]><link url="docster.html">docster.html</link>
        <![CDATA[.  When docster.html
        is viewed through a standard HTML browser, it looks exactly like what it is:
        a minimal skeleton document, integrating style elements with sample text, just
        as a designer might provide.  View the source of docster.html and you will
        find that it has been embellished with 'xpl' attributes which describe the relationship
        between that document and an XML data document. 
      ]]></para>
    </chapter>
    <chapter>
      <title>Output Document</title>
      <para><![CDATA[
			The output document is named by appending '.xsl' extension.  to the input file name
          ie. source document 'index.html' will produce an output 
			document name 'index.html.xsl'.
			]]></para>
      <para><![CDATA[
			Processing a source document with dexter may result in more than one stylesheet 
			being generated.
			]]></para>
      <para><![CDATA[
			The default encoding is 'UTF-8' and I have done very little (IE. nothing) to investigate 
			it's use with other character encodings.
				]]></para>
    </chapter>
    <chapter>
      <title>Paths</title>
      <para><![CDATA[
      Many dexter productions accept data path arguments. Dexter paths are based on a 
      modified data-path notation similar to XPath but, in the authors opinion, not quite
      as ugly and a little more intuitive. Attributes, specified in XPath by '@', are 
      indicated with ':'.  in dexterity. The '@' operator is instead adopted by dexterity
      to introduce the path function suffix. The variable-depth path, notated
      in XPath as './/', dexter adopts the ant-inspired '**' instead.
      ]]></para>
      <para><![CDATA[
      Other differences arise from the fact that dexter only exposes a 
      tiny sub-set of XSL functionality.  It is the author's assertion this comprises that
      subset of XSL which we actually need to accomplish everyday tasks. It is expected
      that extraordinary tasks, where they cannot be readily generalized and graduated into
      the dexterity base, may be accomplished by implementing custom descriptors.  See the 
      ]]><link url="dexter-api.xml">API Documentation</link><![CDATA[ for further information about this.
      ]]></para>
      <para><![CDATA[
      Dexterity paths are always evaluated in context.  The default context path is defined as '/'
      at the beginning of each input document.  Path context is modified by the 'env' and 'each' 
      operators. The modification applies to the scope of the element in which it is
      defined. Dexterity paths which begin with '/' (after prefix operators have been evaluated) 
      are treated as absolute, otherwise they are mapped relative to current context. 
      Some path examples: 
      ]]></para>
      <para><![CDATA[
      A data path expression is considered unresolved it cannot locate a data item in the context
      of the current data document.
        ]]></para>
      <para><![CDATA[
      Some path examples: 
        ]]></para>

      <code><![CDATA[
   */metadata/author
   /**/customers/customer:preferred
   friend/../:type
      ]]></code>
    </chapter>
  </section>
  <section>
    <title>Dexterity</title>
    <overview>
      <para><![CDATA[
		Here is reference information for the user who wishes to
		use dexterity to create XSL transforms from existing XML 
      and XHTML documents. 
		]]></para>
      <para><![CDATA[
		Generally speaking, if your productions are defined exclusively by dexterity descriptors 
		(excepting 'ccpy'),  a valid design document results in a stylesheet which will render 
		equally valid result documents. There are exceptions to this, which will be discussed
		in further detail eventually. 
	 ]]></para>
    </overview>
    <chapter>
      <title>Operators</title>
      <para><![CDATA[
      Many dexterity descriptors accept operators which modify a descriptors behavior.
        ]]></para>
      <para><![CDATA[
      The 'imperative' operator '!' is used as a prefix in many descriptor arguments.  Where it occurs,
      it is usually the first character in the expression. It's meaning is contextual. These 
      meanings will be explained in the documentation for each relevant descriptor. 
        ]]></para>
      <para><![CDATA[
      The 'child' operator '#' is used as a prefix to 'each', 'sub' and 'if'.  It causes those
      descriptor's actions to be applied to the set of children, rather than to the element itself.
        ]]></para>
		  <para><![CDATA[The 'raw' operator, '~' is used as a prefix to the value descriptor . It's use
		  supresses output-escaping during data substitution.]]>
		  </para>
      <para><![CDATA[
        The operator '@' is used as a suffix to a path to introduce a path-macro expression.  
        It is dealt with in detail in the next chapter.
        ]]></para> 
      </chapter>
      <chapter>
        <title>Path Functions</title>
       <para><![CDATA[
        When the path-macro operator '@' appears as the first path element 
        in an expression 
        (after prefix operators), a path of '.' is implied. 
        The syntax of a path-macro suffix is as follows:
        ]]></para>
      <code><![CDATA[
  '@' '!' <function-name> [ ':' <argument> ]
      ]]></code>
      <para>
        <![CDATA[
        dexter.properties defines path functions under the key dexter.path.function.<function-name>,
        the value of which is the fully-qualified name of a class implementing the PathFunction interface.
        The details of creating user-defined path-functions are found in the 
        ]]>
        <link url="dexter-api.xml">Dexter API</link><![CDATA[.  There are four predefined path-functions in dexter.
        ]]>
      </para>
      <para><![CDATA[
        @!cmp-name:<argument> - used in test contexts (if, case).  It generates an XPath expression which evaluates
        to true when the name of the current node of the path specified on the left matches the argument. 
        ]]></para>
      <para><![CDATA[
        As cmp-name is expected to be frequently utilized, it supports an abbreviated notation: @<argument>
        ]]></para>
      <code><![CDATA[
        <div xpleach="thing/*">
          <p xplcase="@!cmp-name:foo>
        <!-- render thing/foo -->
          </p>
          <p xplcase="@bar>
        <!-- render thing/bar -->
          </p>
        </div>
      ]]></code>
      <para><![CDATA[
        @!name - used in text evaluation contexts (value, attr).It generates an XPath expression which 
        evaluates to the node name the current node of the path specified on the left. 
        ]]></para>
      <para><![CDATA[
        @!istext - used in test contexts.  It generates an XPath expression which evaluates
        to true when the current node of the path specified on the left is a text node.
      ]]></para>
      <code><![CDATA[
  <pre xplcase="@!istext" xplvalue=".">
  <!-- render text node literally -->
    ...
  </p>
  <div xpldefault="">
  <!-- handle whatever else -->
    ...
  </div>
      ]]></code>
      <para><![CDATA[
        @!text - used in iterator contexts (each).  It generates an XPath expression which create a data
        axis containing the text node children of the  path expression specified on the left.
      ]]></para>
      <code><![CDATA[
      <p xpleach="link|@!text">
      <!-- convert link to anchor -->
         <a xplcase="@link" href="#" xplattr="href:url" xplvalue=".">ipsum lorum</a>
      <!-- handle the fall-through text nodes -->
         <span xpldefault="">ipsum lorum</span>
    
      </p>
      ]]></code>
      <para><![CDATA[
        @!trim - applies the XPath function normalize-whitespace() to the text content of the data path.
        Whitespace is normalized by stripping leading and trailing 
        whitespace and replacing sequences of whitespace characters by a single space. 
      ]]></para>
    </chapter>
    <chapter>
      <title>env</title>
      <para><![CDATA[
			'env' - sets the data path context for other dexterity descriptors operating within it's scope.
			The path it sets is evaluated in the context of the current path such that absolute paths will
			be set absolutely, relative paths will be resolved in the current context.  'env' does not 
			generate any XSLT productions.  It does not admit any prefix operators.
			'each' sets the context path in a similar way.
	]]></para>
      <code><![CDATA[
   <div xplenv="**/customers">
      ...
   </div>
   		]]></code>
    </chapter>

    <chapter>
      <title>value, ccpy</title>
      <para><![CDATA[
				Dexterity is equipped with two descriptors which map data into the child nodes of the
				source element: 'value' and 'ccpy'.
	  ]]></para>
      <para><![CDATA[
				'value' replaces all child nodes of the current source element with the text content 
				of the data node specified by the path.  
        ]]></para>
      <para><![CDATA[
        'ccpy' is similar to 'value' except that, instead of substituting text values, it will
        export all children of the data node replacing all children of the current source element. 
      ]]>
      </para>
      <para><![CDATA[
        If the imperative operator '!' is prefixed to the expression,
		the child nodes of the current source element will be retained as the default value 
		in the event the data path specified is unresolvable.  When '!' is  not specified and
		the data path is unresolvable, no child node will be inserted in the output document and 
		the current source element will be rendered as an empty element.
		]]></para>
      <para><![CDATA[
        For value only: If the unescape operator '~' is prefixed to the expression (after the '!', if it is present)
        it will disable the default output escaping, potentially inserting illegal characters such as  '&' and '<' 
        into the result document.  This can be useful when the goal is not neccessarily to produce well-formed XML.
        ]]></para>

      <code><![CDATA[
   in the source document: 
      <title xplvalue="*/metadata/title">This will be thrown away</title>
         ...
      <div xplenv="*/metadata">
         Title: <h3  xplvalue="title">Throw Me Away Title</h3>
         Author: <span  xplvalue="!author">Michael Dykman</span>
      </div>
				
   produces an XSL transformation which will render this XML data fragment:
      <data>
         <metadata>
            <title>The Castle</title>
            <author>Franz Kafka</author>
            ...						
   into this:
      <title >The Castle</title>
         ...
      <div>
         Title: <h3>The Castle</h3>
         Author: <span>Franz Kafka</span>
      </div>
      ]]></code>
      <para>
        <![CDATA[
	When the objective is to produce XHTML over-reliance on 'ccpy' should be considered a hack. 
	While it can be useful to implement containers for pre-formatted content, using it as a 
	general habit implies that the application has formatting details interpolated with the
	data stream which is exactly the kind of thing we are trying to avoid.  Still, there are 
	cases where it can be useful in transitional strategies or when outputting stylesheets where
	input and output types share common structures.   
	]]>
      </para>
      <code><![CDATA[
   <!-- in the source: -- -->
   <div xplccpy="!user/essay">
   <h1>The user is reticent on this topic</h1>
      ...
   </div>
   		
   this will replace the content of the <div> with the child content of 
   user/essay.
					 
   a data document might look like
   <user ...>
   ...
      <essay>
         <h1>the story of my life</h1>
         <p>In a small shack built on the bayous of Louisiana...
         </p>
         ...
      <essay>
   </user>
   	]]></code>
    </chapter>
    <chapter>
      <title>attr</title>
      <para>
        <![CDATA[
		'attr' - accepts a space-delimited list of expressions each of which is prefixed with 
		an attribute assignment expression of the form "attribute-name ':' expression". Each 
		expression causes the attribute named on the left-hand side of the expression to be
		assigned the value of the expression on the right.
		]]>
      </para>
      <para>
        <![CDATA[
		For a simple expression, one not containing '{', the entire expression is evaluated as
		a data path.  The text content of the node described by the data path is assigned to the
		named attribute.  
		]]>
      </para>
      <code><![CDATA[
   <a href="www.fake.com" xplattr="href:homepage">click here</a>

   <img src="default-image.jpg" width="40" height="40"
      xplattr="src:image width:image:width height:image:height"/>
   maps data from the example image element into the attributes of the img element
   <image width="60" height="40">john.jpg</image>
   	]]></code>
      <para>
        <![CDATA[
		When an expression does contain '{', it is termed a compound expression and the following
		rules are applied. Each '{' character expects a closing '}' character. Nesting is not 
		permitted.  The contents of the matched braces '{ }' are evaluated as a data path expression.  
		All characters outside the matched braces are treated as literal content.  The text content
		of each node described in the expression is substituted for the braced expression and the 
		resulting value is assigned to the named attribute.  The value is 
		rendered if and only if all data path components can be resolved in the current data context.
		Currently there is no support for whitespace in literal content.
		]]>
      </para>
      <code><![CDATA[
   <a href="mailto://admin@nowhere.com" xplattr="href:mailto://{email}">email me</a>
      
   <!-- clickable TOC -->
   <a href="#" xplattr="href:#{title}" xplvalue="title>click here</a>
   <!-- where the destination might be defined as  -->
   <a name="disposeme" xplattr="name:title"><h3 >Chapter Title</h3></a>
	
   <!-- turn image information into an img tag -->
   <!-- given a data document: -->
   <user ...>
      <profile>
         <image>
         	<name>hank.jpg</name>
         	<height>48</height>
         	<width>62</width>
         </image>
      </profile>
      ...
   </user>

   <!-- define the transformation.  the shown values of the src, width and height attributes
      are discarded to be replaced with the values from the data document -->
   <img src="default.jpg" width="50" height="50" 
      xplenv="profile/image"
      xplattr="src:/profile/images/{name} height:height width:width" />
   ]]></code>
      <para>
        <![CDATA[
			If the expression is prefixed with the imperative operator '!' and the attribute to be 
			written is specified in the source document, the value of that attribute is retained as a default
			value in the event that the data path specified is unresolvable in the data document.    
			If an expression is unresolved, the default value will be supplied when it has been indicated, 
			otherwise it is blank.  When multiple data paths have been specified via compound notation, 
			the default will be applied if any data path expression is unresolved. 
			]]>
      </para>
      <code><![CDATA[
   <a href="javascript:alert('a path component was absent from the data'); void(0);" 
      xplattr="href:!/files/{directory}/{filename}" xplvalue="!filename">click here</a>
			]]></code>
    </chapter>

    <chapter>
      <title>if, case..default</title>
      <para>
        <![CDATA[
				Two mechanisms are provided for addressing conditional output: 'if' and the 
				'case'..'default' construct.  Both 'if' and 'case' accept a delimited list of
				 expressions.  An expression which contains only a data path expression evaluates
				 to true if the data path can be resolved in the current data context, otherwise 
				 it is false.
			]]>
      </para>
      <para>
        <![CDATA[
				Delimiters consist of spaces ' ' or pipes '|'. 
				Space separators imply AND operations; pipes imply OR.  
				All AND expressions are resolved before any OR expressions are evaluated. 
				Empty test lists are illegal. Expression grouping via braces is not permitted.
			]]>
      </para>
      <para>
        <![CDATA[
				'if' - decides whether the current source node and it's children are to 
				be rendered into the target document or not.  There are
				no external side-effects.  
				]]>
      </para>
      <code><![CDATA[
   <!-- render the div if the current data node contains the 'preferred' attribute -->
   <div id="userinfo" xplif=":preferred">
     ...
  </div>

   <!-- if the current data node is named 'code', render the tag allowing the xplvalue 
       expression to define it's text content -->
   <pre xplif="@code" xplvalue="."/>
      ]]></code>
      <para>
        <![CDATA[
        Prefixing the imperative operator '!" to a test expression negates the boolean 
        value.
      ]]>
      </para>
      <para>
        <![CDATA[
        When the argument to 'if' is prefixed with the child operator '#', the effect 
        is to produce an empty element, attributes intact, when the expression list 
        evaluates to false.  
    ]]>
      </para>
      <para>
        <![CDATA[
				'case'..'default' - provides if/elseif/else chained logic. When a 'case' 
				descriptor is discovered in the input document, a block is determined by 
				scanning forward through contiguous elements (which need not be of the 
				same element type), appending each subsequent 'case' to the exclusivity block.
			]]>
      </para>
      <para>
        <![CDATA[
				The forward-scan is terminated either when an element decorated with 'default' 
				is encountered (which is added to the block as the unconditional 
				fall-through), when an element with neither 'case' nor 'default' is 
				encountered (which is not added to the block), or when no more contiguous
				elements can be found.  The 'default' is therefore optional in this construct.
			]]>
      </para>
      <para>
        <![CDATA[
				The expression lists for each 'case' are evaluated in document order.  The first 
				expression list which evaluates to true causes that source node to be rendered into the 
				target document and block evaluation is terminated.  If no 'case' expression
				evaluates to true, the 'default' element, if any, is rendered into the output document.
				If no 'case' expression evaluates to true and no 'default' is specified, then  
				the block evaluation results in no output. 
			]]>
      </para>
      <para>
        <![CDATA[
				Usage examples for 'case'..'default' are provided along with the examples for 'each' 
				]]>
      </para>
    </chapter>
    <chapter>
      <title>each</title>
      <para>
        <![CDATA[
				accepts a data path, optionally prefixed with
				the apply-to-children '#' operator. It causes either
				the source element or the set of it's children to be
				repeated once for each element in the set described by
				the data path. It has the additional effect of setting
				the context path with the same semantics as 'env'.
				]]>
      </para>
      <code><![CDATA[
   <!-- as specified here with '#', this will produce one table with many rows.  
      without the'#' operator, it would produce many tables instead.
   -->
   <table xpleach="#**/customers/customer">
      <tr>
         <td>First Name</td><td xplvalue="firstname">Tom</td>
         <td>Last Name</td><td xplvalue="lastname">Waits</td>
      </tr>
   </table>

   <!-- iterate through all element children of chapter, rendering a div 
      for each and using a case block for type-appropriate content. 
   -->  
   <div xpleach="chapter/*">
      <div xplcase="@title">
      	<a name="tag" xplattr="name:title" />
        <h3 xplvalue=".">my chapter</h3>
      </div>
      <p xplcase="@para" xplvalue=".">lorum ipsum</p>
      <pre xplcase="@code" xplvalue=".">//code sample</pre>
   </div>
    ]]></code>
    </chapter>
    <chapter>
      <title>uniq</title>
      <para>
        <![CDATA[
				'uniq' is used to ensure that specified attribute values remain unique through a document,
				in the same manner as an id attribute. Attributes named in a 'uniq' expression are not id 
				attributes but their values are subject to modification depending upon the iterative 
				context.
			]]>
      </para>
      <para>
        <![CDATA[
				Note that, for both id attributes and uniq-designates, if the attributes are not unique in
				the source document, some of dexter's productions will have undefined results.
			]]>
      </para>
      <code><![CDATA[
   <div xpleach="*/messages/message">
   <!--
   	this will ensure that the form's name attribute will have a unique value 
   	in each repetition. ie. myform-1,myform-2,...
   -->
      <form name="myform" xpluniq="name">
      ...
         <input type="submit" value="read this" xplattr="value:message-{id}" />
      </form>
   </div>
   ]]></code>
    </chapter>
    <chapter>
      <title>sub</title>
      <para>
        <![CDATA[
		'sub' - accepts a data path, optionally prefixed with '#".  It creates a separate
		XML stylesheet document which describes the current source node and it's children
        includes it
		in into the current stylesheet.  That template is then invoked via an XSL
		'apply-templates' call with a match attribute derived from the 'sub' data path.
		If the '#" prefix is specified, the sub-transform will describe the child nodes
		of the current element, instead of the element itself.
			]]>
      </para>
      <para>
        <![CDATA[
		'sub' requires an id-attribute to be defined, on the element which becomes part of the name of the
		sub-transformation.  If a 'sub' descriptor is discovered on an element with the id 
		attribute set to 'messages' in an input document named 'index.html', it will generate
		an 	sub-transformation document named 'index.html-messages-xsl'.     
			]]>
      </para>
      <code><![CDATA[
   <!-- creates a sub Transform named 'messages' which describes the 
      current table element and invoke it via apply-templates -->
   <table id="messages" xplsub="**/messages">
       ...
   </table>
    ]]></code>
      <para>
        <![CDATA[
		Alternatively, the data path expression may be suffixed with a label explicitly 
		indicating the name of a pre-existing XSL transform to be used instead.  In this
		case, no external document is created and the external stylesheet is including into
		the current document.
			]]>
      </para>
      <code><![CDATA[
   <!-- include the external template 'index-messages.xsl'
   	which has been defined in an input file name 
   	'index[.anything]' and invoke it via apply templates.
   	The contents of the current node are discarded.
   	-->
   <table xplsub="**/messages:index.html-messages">
      ...
   </table>
		]]></code>
    </chapter>
    <chapter>
      <title>ignore</title>
      <para>
        <![CDATA[
		'ignore' - accepts an empty argument.  It is used to eliminate an element and it's children
        from  output production.  This is useful when a design document contains several
		examples of repeated content.  The user typically will choose one (or more if 
		'case' is utilized) to describe the output and then apply 'ignore' to the unused
		elements rather removing them from the source.  This assists us in 
		maintaining the integrity of the design document through the build process, 
			]]>
      </para>
      <code><![CDATA[
   <div id="allcustomers" xpleach"#*/customers/customer">
    <div>
      account : <span xplvalue="accountid">12345678</span><br/>
      name    : <span xplvalue="lastname">Iverson</span>, <span xplvalue="firstname">Kenneth</span><br/>
    </div>
    <div xplignore="">
      account : <span >23456789</span><br/>
      name    : <span >Knuth</span>, <span >Donald</span><br/>
    </div>
    <div xplignore="">
      account : <span >34567890</span><br/>
      name    : <span >Bachaus</span>, <span>Jim</span><br/>
    </div>
   </div> 
     ]]></code>
    </chapter>
    <chapter>
      <title>ghost</title>
      <para><![CDATA[
        'ghost' - accepts an empty argument.  Used to eliminate an element from  output 
        production while retaining it's children. It's principal use is to allow an 
        element node to act as a container for other dexter operations, without being 
        represented in the result document.      
        ]]></para>
      <code><![CDATA[
   <!-- I need to splice in part of a phrase but I really don't want the <span>
     in the output.   -->
   <p xpleach"#*/friends/friend">
      My friend is <span xplghost="" xplvalue=".">some schmo</span><br/>
   </p>
   <!-- might produce this in the output document -->
   <p>
      My friend is John<br/>
      My friend is Paul<br/>
      My friend is George<br/>
      My friend is Ringo<br/>
   </p>
     ]]></code>
    </chapter>
  </section>
   <section>
  <title>Didi</title>
    <overview><para>
    Didi is the module responsible for XHTML functionality.
    </para>
	 <para><![CDATA[
	 It is currently in a very experimental state, Classes and interfaces
	 in this package should be considered unstable and are subject to change.
	 ]]>
	 </para>
	 </overview>
    <chapter>
    <title>meta</title>
    <para>
    The meta attribute is linked to a DocumentEditor.
    It replaces the current node with a list of META
    elements with name/content pairs derived from the file
    named in the attribute value.  Through this simple 
    mechanism, we are able to maintain consistent meta tags 
    throughout a document set.  
    </para>
    <code><![CDATA[
    <META xplmeta="dexter.meta" name="keywords" content="example" />
    ]]></code>
    <para>
    The file 'dexter.meta' uses the standard format of a Properties
    file:
    </para>
    <code><![CDATA[
 Rating=General
 Distribution=Global
 Robots=index, follow
 Generator=dexter-0.1.6-beta (c) 2007,2008 Michael Dykman
 Keywords=XSL,XSLT,XHTML,XML,W3C,DocType,web,development,web-development,\
   tool,code-generation,convert,converter
 Description=Dexter is a tool for simplifying the production of XSL \
   stylesheets.
 Author=Michael Dykman <michael@dykman.org>
 Copyright=2007,2008 Michael Dykman
    ]]></code>
    </chapter>
    <chapter>
    <title>data</title>
    <para>
    data employs a concise syntax to expose JavaScript arrays composed
    of data items and form elements. They are rendered as the value of an 
    arbitrary attribute specified in the properties file under the key
    'dexter.didi.data'.  This value may be eval-uated by JavaScript
    to create anonymous data arrays.  The default is to use the attribute
    'jsdata' to contain the string.
    </para>
    <code><![CDATA[
    dexter.didi.data=jsdata
    ]]></code>
    <para>
    This descriptor expects a space-delimited list of data definitions.
    Each definition begins with a name followed by a semi-colon and a value
    expression.  There are 3 classes of value expression: form-reference,
	 literal and data-path.
    </para>
    <para>
    The following will create an array containing three named items, 'field', 'action' and 'id',
	 giving an example of each expression class.
    </para>
    <code><![CDATA[
 xpldata="field:$myform.field action:!reload id::id"
    ]]></code>
    <para>
    'field:$myform.field' has a data value expression beginning with a '$'
    operator.  This indicates that this item refers to a specific element 
    of a named form and will construct a JavaScript expression which
    may be evaluated to determine the field's real-time value.  It is
    required that named forms referenced by such expressions are always 
    anointed by the dexterity <link url="#Dexter-uniq">>uniq</link> descriptor.  
	 If this is not observed, invalid code may be generated.
    </para>
    <code><![CDATA[
 document.forms["myform"].field.value
    ]]></code>
    <para>
    'action:!reload' the data value expression is prefixed with the now 
    familiar imperative operator '!' which, in this case, means to treat 
    the rest of the expression as a literal string.
    </para>
    <para>
    'id::id' the data value expression is not prefixed and is therefore 
    treated as a dexter data path, in this case ':id'.  
    Note that the first semi-colon is the name-separator, the second is part 
    of the dexter path.. It is evaluated in context at document assembly and 
    translated into a literal value in the data expression.
    </para>
    <para>
    Upon transformation, the 'jsdata' attribute (which is the default name specified
    in dexter.properties)  of the current node is assigned a value which may be 
    eval'ed by JavaScript as an anonymous Object expression.
    </para>
    <code><![CDATA[ 
 // an attribute expression such as
 xpldata="field:$myform.field action:!reload id::id"
 // may generate a value for the 'jsdata' attribute: (formatted here for readability) 
 { 
    "id":      '55',
    "action": 'reload', 
    "field":  document.forms["myform-4"].field.value 
 }
    ]]></code>
    <para>
    The interface to these data items is flexible. You may give your node an 
    'id' attribute so that your JavaScript may readily navigate to it, or
    retrieve it via callback functions.  
    </para>
    <code><![CDATA[
  <script>
    function myfunc(exp)
    {
      var exp = el.getAttribute("jsdata");
      var data = eval("new Object( " + exp + ");");
      alert("id=" + data.id);
      ...
    }
  </script> 

  <a href="#" onclick="myfunc(this);"
    xpldata="field:$myform.field action:!reload id::id">click here</a>
    ]]></code>
    <para>
    The techhnique exposed by this descriptor is modelled on common practice
    techniques in cross-platform development and is expected to work in
    standard browsers.  
    </para>
    <para>
    It should be noted that attributes generated by this descriptor violate
    strict XHTML in that the default attribute name, 'jsdata' is not in the 
    specification.  I'm not sure how this affects the behaviour of dynamic 
    XHTML validation icons such as the one provided by the W3C.   Alternatively, 
	 the user may limit the use of this descriptor to a specific element or set of 
    elements which share a common legal attribute which is not otherwise in use.
    </para>
    </chapter>
  </section>
</doc>
