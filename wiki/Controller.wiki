 == Introduction ==

The job of a controller should be a straightforward one; it mediates a clients application request to an application's [Model model] and pass the resulting data to the [View view].  

Most often, when a web developer wants to implement something in a different language, they are obliged to change platforms in order to accommodate that language.  This often means having to change our approach to the model and the view mechanics, not to mention the slew of configuration hassles.

Gossamer controller scripts may be written in a variety of [#Supported_Languages languages].  A controller written in one language may even invoke the controller of another and interact with the resulting data.

A typical Gossamer controller responds to client requests by gathering data from the application model into a [#Result_Values digestible structure] and returning it.  The controller may or may not select a [View view], in this case meaning: an example output document marked up with additional attributes to integrate the data.  (See [Dexter]). Precisely how the data is rendered back to the client depends on how the client requested it.

 Continue to [View The View]

 == Controller Environment ==
Here, we will describe the environment shared by all controllers, regardless of the scripting language.

 === Scripts ===

We leverage the JSR223 Script Engine Interface to create an interface which allows many languages to plug to the environment with only the slightest of configuration.

See [ScriptEngines Script Engines] for integration notes as well as notes on extending Gossamer with new languages.

 === Supported Languages ===

 * groovy
 * javascript
 * ruby(jruby)
 * python(python)
 * tcl
 * PHP
 * scheme
 * sleep

 === Result Values ===

In normal operation, a gossamer controller script is expected to return an item of data; an object, an array, a map, a primitive  nested to arbitrary depth.  How the data is rendered to the client by the [View] is entirely dependent on how the script was invoked.  

The serializer that renders these objects into json or XML, has very simple rules.  It expect these types, nested at any level:
 * Lists
 * Maps
 * Arrays
 * Primitives/Primitive Objects
 * POJOs
 * DOM Nodes

Objects of other types many cause eccentric behaviour

A facility for plugging in special handlers for specific objects is under development.

 === Global Variables ===

The [Globals global variables] are only visible to controller.  References to them, or objects they produce may be passed into library routines.

{{{
ruby:
c = $jdbc.get('user')
return getResult(c,args)
}}}
Gets a JDBC Connection (defined as userDataSource in applicationContext-user.xml) and passes it to a routine expecting a JDBC connection and a Map of parameters. 

Some of the most important of these [Globals Global Variables] are listed below.

 * [RequestArgs args]
 * [ViewManager vm]
 * [Session session]
 * [RequestInfo requestInfo]
 * [JDBC jdcb]
 * [HSF hsf] 


 === Direct Output ===

For those odd occasions when Gossamer's model of object-to-formatted output does not meet the task at hand, your controller may instead choose to generate response data directly.

 The [Globals#Writer writer] is used to effect direct-to-stream output.  The stdout of each scrip engine is bound to the HttpResponse Writer and so is designed for character output.  To effect binary output, the output stream should be acquired from the writer.

The writer is also used to set the content type of the direct response.

It should be noted that controllers so written will not respond to the view modes.  The output will be exactly as it has been coded to be.

 ==== Emitting a Text Response Directly ====
{{{
in groovy:
writer.setMimeType('text/plain')
println """
  This is a simple
  block of text
"""
//return null to signal that no further processing is required.
return null

}}}

 ==== Emitting a Binary Response Directly ====
{{{
in groovy:
writer.setMimeType('image/png');

def proc = "dot -T png".execute()
// fill the process' stdin
proc.getOutputStream() <<< """
digraph g {
  A->B
  B->C
  A->C
}
""";
// dump process stdout to web output stream 
writer.getOutputStream() << proc.getInputStream();

return null
}}}