= uploads - The Upload Manager =

Much of the heavy lifting involved in accepting a file upload is provided by Gossamer at the filter level.  Any file upload directed at a Gossamer service is preprocessed by that filter.  The upload manager provides controllers an interface to those results.

If the controller does not explicitly move the file to an application-specific directory in order to keep it, the upload manager guarantees that the file is deleted at the end of the request cycle. 

Let us assume that we are writing a controller to handle a form-based file upload.  

In this first case, we know that the input of type 'file' will be named 'myupload'.

in Javascript:
{{{
// f is a string, a key for the upload manager
var f = args.get('myupload');
var ul = uploads.getUpload(f);
}}}

At this point we have a reference to a `FileUpload` object, which contains the following read-only fields to be accessed through standard getters.
{{{
  size - the file size
  uploadTime - time of upload (as measured by the server)
  originName - the original name of the file
  storagePath - the absolute path to where on the system that file currently resides.
  mimeType - the mime-type as determined by the system
  secureHash - an MD5 hash of the content
  remoteAddress - the IP address from which the file was apparently received.
}}}

  to continue our javascript controller,
{{{
var file = new java.util.File(ul.getStoragePath());
file.renameTo('/my/new/path/' + ul.getOriginName());
}}}

In moving the file, the controller is effectively keeping it, as it would otherwise have been automatically deleted by the upload manager.
 ----

{{{
 var uls = uploads.getUploads() 
}}}
 returns an array of Strings, each one the key of a file upload. Passing each of these Strings in turn to `upload.getUpload()` produces a `FileUpload` object.
 ----
 
 return to [Globals].