<wiki:toc max_depth="3" />

 == View Modes ==

Gossamer takes a different approach to the view. The format for a typical request is influenced by the client making that request.  As a typical controller script returns an object to the system, that object may be rendered in one of several ways without the need to recode the controller to accommodate it.

The 4 view modes are:
 * json
 * xml
 * render
 * rq

Any request to a controller under Gossamer, requires that the request be prefixed with one of these modes.

The 2 simplest of these request modes are demonstrated below.

`/json/myscript` # the result is rendered as json notation, with appropriate mime-type set.
`/xml/myscript` # the result is rendered as XML markup, with appropriate mime-type set.

The other 2 view modes are related to the view manager and are somewhat more sophisticated. They require that the controller specifies a view for that request.

/render/myscript
/rq/myscript


 == View Manager ==

In a groovy controller, specifying that view would be done like so:
{{{
vm.view="myview.html"
}}}

In ruby:
{{{
$vm.setView('myview.html')
}}}

`vm` is the view manager, one of several global variables available to all controllers, regardless of the scripting language.

The view documents may be any valid, well-formed XML, such as XHTML, RSS or a RESP response envelope. Typically, there are marked up with [http://code.google.com/p/dexter-xsl/wiki/UserManual Dexter] attributes to bind the application data to that layout.

Please note that not all XSL must be generated by Dexter.  Manually prepared XSLT stylesheet may also be used. See [#Manual_XSL]

When that view is set, the mangager searches `$GOSSAMER_HOME/xsl/` for `myview.html`.  Assuming that we are using the simple view layout (see Layouts below), we expect to find that at `xsl/myview.html`.  This view is automatically used by [http://code.google.com/p/dexter-xsl/ Dexter] to generate an XSL file which will be used to format the output.

When invoked via /render/myscript, the result from the controller is rendered as XML and is then transformed, on the server-side, into the resulting document.

When invoked via /rq/myscript, the device identification system decides whether or not the requesting client (ie. the web browser) is itself capable of performing client-side XSL transformations.  If it is (as all modern desktop browsers are), The rendered XML is decorated with a processing instruction referencing the about-to-be-generated XSL and the client performs the rendering itself. If not, it is rendered server-side in the same manner as `render`.

If no view is specified, or if the specified view is not found, `rq` and `render` both behave exactly as `xml`.


The view document is ignored when rendering for json or xml.


 == File Layout ==

There are 2 ways of deploying view templates:
 * Simple Layout which accomodates most applications
 * Extended Layout, which lends multi-device support and white-labelling.

 === Simple Layout ===

Under the simple layout, place XML/HTML format files directly under $GOSSAMER_HOME/xsl. An application specifying
`vm.setView('myapp/main.html');` would find the file at `$GOSSAMER_HOME/xsl/myapp/main.html.`

Very sophisticated apps can be build using the simple layout alone.

 === Extended Layout ===

 == XSL Generation ==

 === Automatic XSL ===
Typically, when the view manager is instructed to use "foo.html", it is assumed that the file, once found, will be treated as a [http://code.google.com/p/dexter-xsl/ Dexter] source file and an XSL file eventually be generated from it.  The modified timestamp of that source file is used as part of the XSL file's name.  These same filename-formation rules are used by the Dexter Servlet which performs the actually compilation when it sees that a corresponding XSL file has not yet been generated for that name.

These filename formation rules also insure against over-zealous caches at both the network and the browser levels.  Browser caches in particular seem rather stubborn, but the present naming convention eliminates the problem entirely. 
 === Manual XSL ===
This is easily effected by using a name which does not directly correspond with a filename on the system.  Having saved our manually prepared stylesheet as `$GOSSAMER_HOME/xsl/mystyle.xsl`, we then specify in our controller:
 {{{
 vm.setView('mystyle');
}}}
The view manager will seek the file 'mystyle' and, failing to find it, will look for `mystyle.xsl` instead.  Upon finding it, that stylesheet is bound with the data.

This is effective under both the simple and the extended layouts.